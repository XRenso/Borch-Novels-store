from loader import dp,db
from aiogram import types
import keyboards as kb
import phrase as phr
@dp.message_handler(commands = ['start'])
async def start(message: types.Message):
    user = db.return_user_info(message.from_user.id)
    if user != 0 and user['accept_paper'] == 1:
        await message.answer_photo(photo='AgACAgIAAxkBAAIZlGSSdZ8ekz_L3D1UdfCD_2cKPV97AAJNxzEbVxOYSDqKrtfuwW3mAQADAgADeQADLwQ',
                                   caption= f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.first_name}! üéÅ \n'
                                f'\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω Borch Store.\n'
                             f'\nüî± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é, –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.', reply_markup=kb.main_kb)

        game_code = message.get_args()
        if game_code is not None:
            game = db.return_game_info(game_code)
            media = types.MediaGroup()
            if db.return_user_info(message.from_user.id) != 0:
                markup = kb.get_game(game['game_code'],
                                     db.check_is_game_in_user_library(message.from_user.id, game['game_code']), game['price'],
                                     user_id=message.from_user.id)
                for index, file_id in enumerate(game['game_cover'].split('\n')):
                    match index:
                        case _:
                            match file_id.lower()[0]:
                                case 'b':
                                    media.attach_video(video=file_id)
                                case 'a':
                                    media.attach_photo(photo=file_id)

                game_info_text = phr.get_product_info(game)
                await message.answer_media_group(media)
                await message.answer(game_info_text, reply_markup=markup)
    else:
        await message.answer('–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ: ', reply_markup=kb.agreement_ikb)


@dp.callback_query_handler(kb.paper_cb.filter())
async def agree_paper(call:types.CallbackQuery, callback_data:dict):
    await call.message.edit_text('–£—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ ‚úÖ. \n–ü—Ä–∏—è—Ç–Ω–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞ üéä')
    if db.add_user(call.message.chat.id) == 0:
        db.accepted_paper(call.message.chat.id)
    await call.message.answer_photo(
        photo='AgACAgIAAxkBAAIZlGSSdZ8ekz_L3D1UdfCD_2cKPV97AAJNxzEbVxOYSDqKrtfuwW3mAQADAgADeQADLwQ',
        caption=f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {call.message.from_user.first_name}! üéÅ \n'
                f'\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω Borch Store.\n'
                f'\nüî± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é, –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.', reply_markup=kb.main_kb)